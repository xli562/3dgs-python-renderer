import numpy as np
from dataclasses import dataclass

@dataclass
class GaussianData:
    """ A dataclass to hold multiple 3D Gaussians, 
    using numpy.
    """

    xyz: np.ndarray
    rot: np.ndarray     # rotation of gaus
    scale: np.ndarray   # stretching of gaus
    opacity: np.ndarray     # aka 'alpha' value
    sh: np.ndarray  # Spherical harmonics
    def flat(self) -> np.ndarray:
        ret = np.concatenate([self.xyz, self.rot, self.scale, self.opacity, self.sh], axis=-1)
        return np.ascontiguousarray(ret)

    def __len__(self):
        """ How many Gaussians does the instance contain """
        return len(self.xyz)
    
    def __str__(self):
        """ Returns:
        simple string describing class and length of the instance """
        return f'class GaussianData containing {len(self)} Gaussians.'
    
    def __repr__(self):
        """ Overwrites the __repr__ method generated by the @dataclass decorator
        for clatiry.

        Returns:
            An exhaustive string description of the Gaussians in the dataclass.
        """
        ret_str = f'class GaussianData containing the following {len(self)} Gaussians:\n\n'
        for i in range(len(self)):
            ret_str += f'Gaussian {i}\n'
            ret_str += f'xyz: {self.xyz[i]}\n'
            ret_str += f'rot: {self.rot[i]}\n'
            ret_str += f'scale: {self.scale[i]}\n'
            ret_str += f'opacity: {self.opacity[i]}\n'
            ret_str += f'sh: {self.sh[i]}\n'
            ret_str += '\n'
        return ret_str

    @property
    def sh_dim(self):
        return self.sh.shape[-1]


def naive_gaussians():
    """ Generates 4 Gaussians, for use as debugging data """
    gau_xyz = np.array([
        0, 0, 0,
        1, 0, 0,
        0, 1, 0,
        0, 0, 1,
    ]).astype(np.float32).reshape(-1, 3)
    gau_rot = np.array([
        1, 0, 0, 0,
        1, 0, 0, 0,
        1, 0, 0, 0,
        1, 0, 0, 0
    ]).astype(np.float32).reshape(-1, 4)
    gau_s = np.array([
        0.03, 0.03, 0.03,
        0.2, 0.03, 0.03,
        0.03, 0.2, 0.03,
        0.03, 0.03, 0.2
    ]).astype(np.float32).reshape(-1, 3)
    gau_c = np.array([
        1, 0, 1,
        1, 0, 0,
        0, 1, 0,
        0, 0, 1,
    ]).astype(np.float32).reshape(-1, 3)
    gau_c = (gau_c - 0.5) / 0.28209
    gau_a = np.array([
        1, 1, 1, 1
    ]).astype(np.float32).reshape(-1, 1)
    return GaussianData(
        gau_xyz,
        gau_rot,
        gau_s,
        gau_a,
        gau_c
    )